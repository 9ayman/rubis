import { Application } from "../types/Application"
import { Attachment } from "../types/Attachment";
import { Channel, ChannelMention } from "../types/Channel";
import { Embed } from "../types/Embed";
import { Reaction } from "../types/Reaction";
import { MessageInteraction } from "../types/Interaction";
import User from "../types/User";
import { ResolvedData } from "../types/ResolvedData";
import { Emoji } from "../types/Guild";

export class Message {
    // The id of the message
    id: string;

    // The id of the channel the message was sent in
    channel_id: string;

    // The author of this message (not guaranteed to be a valid user)
    author: User;

    // Contents of the message
    content: string;

    // When this message was sent (ISO8601 timestamp)
    timestamp: string;

    // When this message was edited (or null if never) (ISO8601 timestamp)
    edited_timestamp: string | null;

    // Whether this was a TTS (Text-to-Speech) message
    tts: boolean;

    // Whether this message mentions everyone
    mention_everyone: boolean;

    // Users specifically mentioned in the message
    mentions: User[];

    // Roles specifically mentioned in this message
    mention_roles: string[];

    // Any attached files
    attachments: Attachment[];

    // Any embedded content
    embeds: Embed[];

    // Whether this message is pinned
    pinned: boolean;

    // Type of message
    type: number;

    // Channels specifically mentioned in this message
    mention_channels?: ChannelMention[];

    // Reactions to the message
    reactions?: Reaction[];

    // Used for validating a message was sent
    nonce?: number | string;

    // If the message is generated by a webhook, this is the webhook's id
    webhook_id?: string;

    // Sent with Rich Presence-related chat embeds
    activity?: MessageActivity;

    // Sent with Rich Presence-related chat embeds
    application?: Partial<Application>;

    // If the message is an Interaction or application-owned webhook, this is the id of the application
    application_id?: string;

    // Data showing the source of a crosspost, channel follow add, pin, or reply message
    message_reference?: MessageReference;

    // Message flags combined as a bitfield
    flags?: MessageFlags;

    // The message associated with the message_reference
    referenced_message?: Message;

    // Sent if the message is a response to an Interaction
    interaction?: MessageInteraction;

    // The thread that was started from this message, includes thread member object
    thread?: Channel;

    // Sent if the message contains components like buttons, action rows, or other interactive components
    components?: MessageComponent[];

    // Sent if the message contains stickers
    sticker_items?: MessageStickerItem[];

    // Deprecated: The stickers sent with the message
    stickers?: Sticker[];

    // A generally increasing integer representing the approximate position of the message in a thread
    position?: number;

    // Data of the role subscription purchase or renewal that prompted this ROLE_SUBSCRIPTION_PURCHASE message
    role_subscription_data?: RoleSubscriptionData;

    // Data for users, members, channels, and roles in the message's auto-populated select menus
    resolved?: ResolvedData;

    constructor(messageOptions: MessageOptions) {
        this.id = messageOptions.id;
        this.channel_id = messageOptions.channel_id;
        this.author = messageOptions.author;
        this.content = messageOptions.content;
        this.timestamp = messageOptions.timestamp;
        this.edited_timestamp = messageOptions.edited_timestamp;
        this.tts = messageOptions.tts;
        this.mention_everyone = messageOptions.mention_everyone;
        this.mentions = messageOptions.mentions;
        this.mention_roles = messageOptions.mention_roles;
        this.mention_channels = messageOptions.mention_channels;
        this.attachments = messageOptions.attachments;
        this.embeds = messageOptions.embeds;
        this.reactions = messageOptions.reactions;
        this.nonce = messageOptions.nonce;
        this.pinned = messageOptions.pinned;
        this.webhook_id = messageOptions.webhook_id;
        this.type = messageOptions.type;
        this.activity = messageOptions.activity;
        this.application = messageOptions.application;
        this.application_id = messageOptions.application_id;
        this.message_reference = messageOptions.message_reference;
        this.flags = messageOptions.flags;
        this.referenced_message = messageOptions.referenced_message;
        this.interaction = messageOptions.interaction;
        this.thread = messageOptions.thread;
        this.components = messageOptions.components;
        this.sticker_items = messageOptions.sticker_items;
        this.stickers = messageOptions.stickers;
        this.position = messageOptions.position;
        this.role_subscription_data = messageOptions.role_subscription_data;
        this.resolved = messageOptions.resolved;
    }
}

export interface MessageOptions {
    // The id of the message
    id: string;

    // The id of the channel the message was sent in
    channel_id: string;

    // The author of this message (not guaranteed to be a valid user)
    author: User;

    // Contents of the message
    content: string;

    // When this message was sent (ISO8601 timestamp)
    timestamp: string;

    // When this message was edited (or null if never) (ISO8601 timestamp)
    edited_timestamp: string | null;

    // Whether this was a TTS (Text-to-Speech) message
    tts: boolean;

    // Whether this message mentions everyone
    mention_everyone: boolean;

    // Users specifically mentioned in the message
    mentions: User[];

    // Roles specifically mentioned in this message
    mention_roles: string[];

    // Any attached files
    attachments: Attachment[];

    // Any embedded content
    embeds: Embed[];

    // Whether this message is pinned
    pinned: boolean;

    // Type of message
    type: number;

    // Channels specifically mentioned in this message
    mention_channels?: ChannelMention[];

    // Reactions to the message
    reactions?: Reaction[];

    // Used for validating a message was sent
    nonce?: number | string;

    // If the message is generated by a webhook, this is the webhook's id
    webhook_id?: string;

    // Sent with Rich Presence-related chat embeds
    activity?: MessageActivity;

    // Sent with Rich Presence-related chat embeds
    application?: Partial<Application>;

    // If the message is an Interaction or application-owned webhook, this is the id of the application
    application_id?: string;

    // Data showing the source of a crosspost, channel follow add, pin, or reply message
    message_reference?: MessageReference;

    // Message flags combined as a bitfield
    flags?: MessageFlags;

    // The message associated with the message_reference
    referenced_message?: Message;

    // Sent if the message is a response to an Interaction
    interaction?: MessageInteraction;

    // The thread that was started from this message, includes thread member object
    thread?: Channel;

    // Sent if the message contains components like buttons, action rows, or other interactive components
    components?: MessageComponent[];

    // Sent if the message contains stickers
    sticker_items?: MessageStickerItem[];

    // Deprecated: The stickers sent with the message
    stickers?: Sticker[];

    // A generally increasing integer representing the approximate position of the message in a thread
    position?: number;

    // Data of the role subscription purchase or renewal that prompted this ROLE_SUBSCRIPTION_PURCHASE message
    role_subscription_data?: RoleSubscriptionData;

    // Data for users, members, channels, and roles in the message's auto-populated select menus
    resolved?: ResolvedData;
}

export interface MessageReference {
    /** ID of the originating message. */
    message_id?: string | null;

    /** ID of the originating message's channel. */
    channel_id?: string | null;

    /** ID of the originating message's guild. */
    guild_id?: string | null;

    /** When sending, whether to error if the referenced message doesn't exist instead of sending as a normal (non-reply) message. Default true. */
    fail_if_not_exists?: boolean;
}

export interface StickerItem {
    /** ID of the sticker. */
    id: string;

    /** For standard stickers, ID of the pack the sticker is from. */
    pack_id?: string;

    /** Name of the sticker. */
    name: string;

    /** Description of the sticker. */
    description?: string;

    /** Autocomplete/suggestion tags for the sticker (max 200 characters). */
    tags: string;

    /** Deprecated previously the sticker asset hash, now an empty string. */
    asset?: string;

    /** Type of sticker. */
    type: number;

    /** Type of sticker format. */
    format_type: number;

    /** Whether this guild sticker can be used, may be false due to loss of Server Boosts. */
    available?: boolean;

    /** ID of the guild that owns this sticker. */
    guild_id?: string;

    /** The user that uploaded the guild sticker. */
    user?: User;

    /** The standard sticker's sort order within its pack. */
    sort_value?: number;
}

export interface MessageStickerItem {
    id: string;        
    name: string;       
    format_type: StickerFormatType;
}

export interface RoleSubscriptionData {
    /** The ID of the SKU and listing that the user is subscribed to. */
    role_subscription_listing_id: string;

    /** The name of the tier that the user is subscribed to. */
    tier_name: string;

    /** The cumulative number of months that the user has been subscribed for. */
    total_months_subscribed: number;

    /** Whether this notification is for a renewal rather than a new purchase. */
    is_renewal: boolean;
}

export interface MessageActivity {
    /** Type of message activity */
    type: number;

    /** Party ID from a Rich Presence event */
    party_id?: string;
}

export interface MessageComponent {
    /** Type of the component */
    type: number;

    /** Developer-defined identifier for the component; max 100 characters */
    custom_id?: string;

    /** Label for the component; max 45 characters */
    label?: string;

    /** Style of the text input component */
    style?: number;

    /** Minimum input length for a text input; min 0, max 4000 */
    min_length?: number;

    /** Maximum input length for a text input; min 1, max 4000 */
    max_length?: number;

    /** Whether the text input component is required to be filled (defaults to true) */
    required?: boolean;

    /** Pre-filled value for the text input component; max 4000 characters */
    value?: string;

    /** Custom placeholder text if the input is empty; max 100 characters */
    placeholder?: string;

    /** Array of options for select menu components (type 3) */
    options?: SelectOption[];

    /** Minimum number of items that must be chosen (defaults to 1); min 0, max 25 */
    min_values?: number;

    /** Maximum number of items that can be chosen (defaults to 1); max 25 */
    max_values?: number;

    /** Whether the select menu is disabled (defaults to false) */
    disabled?: boolean;

    /** Array of default value objects for auto-populated select menu components; number of default values must be in the range defined by min_values and max_values */
    default_values?: SelectDefaultValue[];

    /** List of channel types to include in the channel select component (type 8) */
    channel_types?: string[];
}

export interface SelectOption {
    /** User-facing name of the option; max 100 characters */
    label: string;

    /** Dev-defined value of the option; max 100 characters */
    value: string;

    /** Additional description of the option; max 100 characters */
    description?: string;

    /** Emoji associated with the option */
    emoji?: Partial<Emoji>;

    /** Will show this option as selected by default */
    default?: boolean;
}

export interface SelectDefaultValue {
    /** ID of a user, role, or channel */
    id: string;

    /** Type of value that id represents. Either "user", "role", or "channel" */
    type: string;
}

export interface Sticker {
    /** ID of the sticker */
    id: string;

    /** For standard stickers, ID of the pack the sticker is from */
    pack_id?: string;

    /** Name of the sticker */
    name: string;

    /** Description of the sticker */
    description?: string;

    /** Autocomplete/suggestion tags for the sticker (max 200 characters) */
    tags?: string;

    /** Deprecated; previously the sticker asset hash, now an empty string */
    asset?: string;

    /** Type of sticker */
    type: number;

    /** Type of sticker format */
    format_type: number;

    /** Whether this guild sticker can be used; may be false due to loss of Server Boosts */
    available?: boolean;

    /** ID of the guild that owns this sticker */
    guild_id?: string;

    /** User object representing the user that uploaded the guild sticker */
    user?: User;

    /** The standard sticker's sort order within its pack */
    sort_value?: number;
}

export enum MessageActivityType {
    JOIN = 1,
    SPECTATE = 2,
    LISTEN = 3,
    JOIN_REQUEST = 5,
}

export enum MessageFlags {
    CROSSPOSTED = 1 << 0,
    IS_CROSSPOST = 1 << 1,
    SUPPRESS_EMBEDS = 1 << 2,
    SOURCE_MESSAGE_DELETED = 1 << 3,
    URGENT = 1 << 4,
    HAS_THREAD = 1 << 5,
    EPHEMERAL = 1 << 6,
    LOADING = 1 << 7,
    FAILED_TO_MENTION_SOME_ROLES_IN_THREAD = 1 << 8,
    SUPPRESS_NOTIFICATIONS = 1 << 12,
    IS_VOICE_MESSAGE = 1 << 13,
}

export enum ComponentType {
    ActionRow = 1,
    Button = 2,
    StringSelect = 3,
    TextInput = 4,
    UserSelect = 5,
    RoleSelect = 6,
    MentionableSelect = 7,
    ChannelSelect = 8,
}

export enum StickerFormatType {
    PNG	= 1,
    APNG = 2,
    LOTTIE = 3,
    GIF = 4
}